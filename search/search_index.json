{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Akapy","text":"<p>Home to the best Akamai API wrapper written in Python this side of the Mississippi!</p> <p></p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>pre-commit</li> <li>Poetry</li> </ul>"},{"location":"getting-started/#pull-the-repo","title":"Pull the Repo","text":""},{"location":"getting-started/#my-way","title":"My way","text":"<pre><code>mkdir -p $HOME/repos/open-source\ngit clone https://github.com/RemoteRabbit/akapy.git &gt;&gt; $HOME/repos/open-source\ntms $HOME/repos/open-source/akapy\n\n# If you don't use tmux-session-wizard\ncd $HOME/repos/open-source/akapy\n</code></pre>"},{"location":"getting-started/#setup-pre-commit","title":"Setup pre-commit","text":"<p>Once you have pre-commit installed and the repo pulled down to your local machine, <code>cd</code> into it. Once in run:</p> <pre><code>pre-commit install\n</code></pre> <p>After that you can continue on and when you go to commit any changes you'll see some base tests run beforehand that you'll want to make sure are in working order before pushing the change up.</p>"},{"location":"guides/contribute/","title":"Contributing","text":""},{"location":"guides/contribute/#prerequisites","title":"Prerequisites","text":"<ul> <li>pre-commit</li> <li>Poetry</li> </ul>"},{"location":"guides/contribute/#pull-the-repo","title":"Pull the Repo","text":""},{"location":"guides/contribute/#my-way","title":"My way","text":"<pre><code>mkdir -p $HOME/repos/open-source\ngit clone https://github.com/RemoteRabbit/akapy.git &gt;&gt; $HOME/repos/open-source\ntms $HOME/repos/open-source/akapy\n</code></pre>"},{"location":"guides/contribute/#general-way","title":"General Way","text":"<pre><code>git clone https://github.com/RemoteRabbit/akapy.git\n</code></pre>"},{"location":"guides/contribute/#setup-pre-commit","title":"Setup pre-commit","text":"<p>Once you have pre-commit installed and the repo pulled down to your local machine, <code>cd</code> into it. Once in run:</p> <pre><code>pre-commit install\n</code></pre> <p>After that you can continue on and when you go to commit any changes you'll see some base tests run beforehand that you'll want to make sure are in working order before pushing the change up.</p>"},{"location":"guides/example/","title":"Example using Akapy","text":""},{"location":"guides/example/#the-code","title":"The Code","text":"<pre><code>import akapy as ak\n\nc = akapy.Cloudlet()\n\nprint(c.get_all())\n</code></pre>"},{"location":"guides/example/#the-return","title":"The Return","text":"<pre><code>[\n  {\n    \"serviceVersion\": null,\n    \"apiVersion\": \"2.0\",\n    \"location\": \"/cloudlets/api/v2/cloudlet-info/3\",\n    \"cloudletId\": 3,\n    \"cloudletCode\": \"FR\",\n    \"cloudletName\": \"FORWARDREWRITE\"\n  },\n  {\n    \"serviceVersion\": null,\n    \"apiVersion\": \"2.0\",\n    \"location\": \"/cloudlets/api/v2/cloudlet-info/0\",\n    \"cloudletId\": 0,\n    \"cloudletCode\": \"ER\",\n    \"cloudletName\": \"EDGEREDIRECTOR\"\n  }\n]\n</code></pre>"},{"location":"guides/getting-started/","title":"Getting Started","text":""},{"location":"guides/getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>pre-commit</li> <li>Poetry</li> </ul>"},{"location":"guides/getting-started/#pull-the-repo","title":"Pull the Repo","text":""},{"location":"guides/getting-started/#my-way","title":"My way","text":"<pre><code>mkdir -p $HOME/repos/open-source\ngit clone https://github.com/RemoteRabbit/akapy.git &gt;&gt; $HOME/repos/open-source\ntms $HOME/repos/open-source/akapy\n</code></pre>"},{"location":"guides/getting-started/#general-way","title":"General Way","text":"<pre><code>git clone https://github.com/RemoteRabbit/akapy.git\n</code></pre>"},{"location":"guides/getting-started/#setup-pre-commit","title":"Setup pre-commit","text":"<p>Once you have pre-commit installed and the repo pulled down to your local machine, <code>cd</code> into it. Once in run:</p> <pre><code>pre-commit install\n</code></pre> <p>After that you can continue on and when you go to commit any changes you'll see some base tests run beforehand that you'll want to make sure are in working order before pushing the change up.</p>"},{"location":"references/akapy/","title":"Akapy Base","text":""},{"location":"references/akapy/#akapy.__version__","title":"<code>__version__ = '0.3.1'</code>  <code>module-attribute</code>","text":"<p>The akapy package imports the Auth, Cloudlet, and Requester classes, as well as defines the version variable.</p> <p>The Auth class provides authentication functionality. The Cloudlet class represents a cloudlet resource and operations on it. The Requester provides a request client for making API calls.</p> <p>Together this allows akapy to authenticate with a service, access cloudlet resources,  and make API requests to manage and utilize cloudlets. The version provides the package version.</p>"},{"location":"references/auth/","title":"Auth","text":"<p>Handles authentication and creates requests session.</p> Source code in <code>akapy/auth.py</code> <pre><code>class Auth:\n    \"\"\"Handles authentication and creates requests session.\"\"\"\n\n    def __init__(\n        self,\n        EDGERC_PATH: str = \"~/.edgerc\",\n        SECTION: str = \"default\",\n        RETRY_ITERATION: int = 5,\n        RETRY_BACKOFF: int = 1,\n    ) -&gt; None:\n        \"\"\"\n        Initialize authentication and create requests session.\n\n        Args:\n            EDGERC_PATH: Path to .edgerc file\n            SECTION: Section in .edgerc file\n            RETRY_ITERATION: Number of retries\n            RETRY_BACKOFF: Backoff factor between retries\n        \"\"\"\n\n        self.SECTION = SECTION\n        self.EDGERC = EdgeRc(EDGERC_PATH)\n        self.HOSTURL = f\"https://{self.EDGERC.get(self.SECTION, 'host')}\"\n        self.SESSION = requests.Session()\n\n        self.RETRY_STRATEGY = Retry(\n            total=RETRY_ITERATION,\n            backoff_factor=RETRY_BACKOFF,\n            status_forcelist=tuple(range(500, 600)),\n            allowed_methods=frozenset([\"DELETE\", \"GET\", \"POST\", \"PUT\"]),\n        )\n\n        self.ADAPTER = HTTPAdapter(max_retries=self.RETRY_STRATEGY)\n        self.SESSION.mount(\"http://\", self.ADAPTER)\n        self.SESSION.mount(\"https://\", self.ADAPTER)\n\n        self.SESSION.auth = EdgeGridAuth.from_edgerc(self.EDGERC, self.SECTION)\n\n    def get_session(self):\n        \"\"\"Returns the requests session.\"\"\"\n        return self.SESSION\n\n    @property\n    def host_url(self):\n        \"\"\"Returns the base API host URL.\"\"\"\n        return self.HOSTURL\n</code></pre>"},{"location":"references/auth/#akapy.Auth.host_url","title":"<code>host_url</code>  <code>property</code>","text":"<p>Returns the base API host URL.</p>"},{"location":"references/auth/#akapy.Auth.__init__","title":"<code>__init__(EDGERC_PATH='~/.edgerc', SECTION='default', RETRY_ITERATION=5, RETRY_BACKOFF=1)</code>","text":"<p>Initialize authentication and create requests session.</p> <p>Parameters:</p> Name Type Description Default <code>EDGERC_PATH</code> <code>str</code> <p>Path to .edgerc file</p> <code>'~/.edgerc'</code> <code>SECTION</code> <code>str</code> <p>Section in .edgerc file</p> <code>'default'</code> <code>RETRY_ITERATION</code> <code>int</code> <p>Number of retries</p> <code>5</code> <code>RETRY_BACKOFF</code> <code>int</code> <p>Backoff factor between retries</p> <code>1</code> Source code in <code>akapy/auth.py</code> <pre><code>def __init__(\n    self,\n    EDGERC_PATH: str = \"~/.edgerc\",\n    SECTION: str = \"default\",\n    RETRY_ITERATION: int = 5,\n    RETRY_BACKOFF: int = 1,\n) -&gt; None:\n    \"\"\"\n    Initialize authentication and create requests session.\n\n    Args:\n        EDGERC_PATH: Path to .edgerc file\n        SECTION: Section in .edgerc file\n        RETRY_ITERATION: Number of retries\n        RETRY_BACKOFF: Backoff factor between retries\n    \"\"\"\n\n    self.SECTION = SECTION\n    self.EDGERC = EdgeRc(EDGERC_PATH)\n    self.HOSTURL = f\"https://{self.EDGERC.get(self.SECTION, 'host')}\"\n    self.SESSION = requests.Session()\n\n    self.RETRY_STRATEGY = Retry(\n        total=RETRY_ITERATION,\n        backoff_factor=RETRY_BACKOFF,\n        status_forcelist=tuple(range(500, 600)),\n        allowed_methods=frozenset([\"DELETE\", \"GET\", \"POST\", \"PUT\"]),\n    )\n\n    self.ADAPTER = HTTPAdapter(max_retries=self.RETRY_STRATEGY)\n    self.SESSION.mount(\"http://\", self.ADAPTER)\n    self.SESSION.mount(\"https://\", self.ADAPTER)\n\n    self.SESSION.auth = EdgeGridAuth.from_edgerc(self.EDGERC, self.SECTION)\n</code></pre>"},{"location":"references/auth/#akapy.Auth.get_session","title":"<code>get_session()</code>","text":"<p>Returns the requests session.</p> Source code in <code>akapy/auth.py</code> <pre><code>def get_session(self):\n    \"\"\"Returns the requests session.\"\"\"\n    return self.SESSION\n</code></pre>"},{"location":"references/cloudlets/","title":"How to use Cloudlets","text":"<p>Handles Cloudlet API requests.</p> Source code in <code>akapy/cloudlets/cloudlet.py</code> <pre><code>class Cloudlet:\n    \"\"\"Handles Cloudlet API requests.\"\"\"\n\n    def __init__(self, auth=None) -&gt; None:\n        \"\"\"\n        Initialize Cloudlet API client.\n\n        Args:\n            auth: Auth object for handling credentials. Will use default if not provided.\n        \"\"\"\n        if auth is None:\n            self.auth = Auth()\n        else:\n            self.auth = auth\n\n        self.endpoint = \"cloudlets/api/v2\"\n        self.requester = Requester(self.auth.get_session(), self.auth.host_url)\n        self.cloudlet_types = {\n            0: {\"name\": \"Edge Redirector\", \"abbreviation\": \"ER\"},\n            1: {\"name\": \"Visitor Prioritization\", \"abbreviation\": \"VP\"},\n            3: {\"name\": \"Forward Rewrite\", \"abbreviation\": \"FR\"},\n            4: {\"name\": \"Request Control\", \"abbreviation\": \"RC\"},\n            5: {\"name\": \"API Prioritization\", \"abbreviation\": \"AP\"},\n            6: {\"name\": \"Audience Segmentation\", \"abbreviation\": \"AS\"},\n            7: {\"name\": \"Phased Release\", \"abbreviation\": \"PR\"},\n            9: {\"name\": \"Application Load Balancer\", \"abbreviation\": \"ALB\"},\n        }\n\n    def _get_cloudlet_id(self, cloudlet_id: Union[int, str]) -&gt; Union[int, None]:\n        \"\"\"Converts a cloudlet ID to an integer.\n\n        Args:\n            cloudlet_id (Union[int, str]): The cloudlet ID, either as an integer\n                or a string name/abbreviation.\n\n        Returns:\n            int: The integer cloudlet ID.\n\n        This handles looking up the integer ID from the name/abbreviation\n        if a string is provided.\n        \"\"\"\n        cloudlet_type_int = None\n        if isinstance(cloudlet_id, int):\n            cloudlet_type_int = cloudlet_id\n        else:\n            for k, v in self.cloudlet_types.items():\n                if cloudlet_id in (v[\"name\"], v[\"abbreviation\"]):\n                    cloudlet_type_int = k\n                    break\n        return cloudlet_type_int\n\n    def get_all(self) -&gt; List[Dict]:\n        \"\"\"Gets information on all cloudlets.\n\n        Makes a GET request to the /cloudlet-info endpoint to retrieve \n        a list of dictionaries containing information on all available cloudlets.\n\n        Returns:\n            List[Dict]: A list of dictionaries containing information on all cloudlets.\n        \"\"\"\n        return self.requester(method=\"GET\", endpoint=f\"{self.endpoint}/cloudlet-info\")\n\n    def by_type(self, cloudlet_id: Union[int, str]) -&gt; List[Dict]:\n        \"\"\"Get cloudlet type information.\n\n        Args:\n            cloudlet_id (Union[int, str]): The cloudlet type identifier, \n                either as an integer or a name/abbreviation string.\n                Cloudlet type options:\n                    0: \"Edge Redirector\" (ER)\n                    1: \"Visitor Prioritization\" (VP)\n                    3: \"Forward Rewrite\" (FR)\n                    4: \"Request Control\" (RC)\n                    5: \"API Prioritization\" (AP)\n                    6: \"Audience Segmentation\" (AS)\n                    7: \"Phased Release\" (PR)\n                    9: \"Application Load Balancer\" (ALB)\n\n        Returns:\n            List[Dict]: List of dictionaries containing the cloudlet type information.\n\n        This function handles looking up the cloudlet type integer ID\n        from the name or abbreviation string if provided.\n        It constructs the API endpoint using this integer ID and makes the request.\n        \"\"\"\n\n        return self.requester(\n            method=\"GET\", endpoint=f\"{self.endpoint}/{self._get_cloudlet_id(cloudlet_id)}\"\n        )\n\n    def list_groups(self) -&gt; List[Dict]:\n        \"\"\"\n        List all groups available to the user.\n\n        Makes a GET request to the groups endpoint to retrieve a\n        list containing information about the groups.\n\n        Returns:\n            List[Dict]: List containing the group information dicts.\n        \"\"\"\n        return self.requester(endpoint=f\"{self.endpoint}/group-info\", method=\"GET\")\n\n    def list_policies(\n        self, \n        is_deleted: bool = False, \n        cloudlet_id: Union[int, str, None] = None\n    ) -&gt; List[Dict]:\n        \"\"\"\n        List policies filtered by deleted status and cloudlet ID.\n\n        Args:\n            is_deleted: Whether to include deleted policies.\n            cloudlet_id: Optional cloudlet ID to filter by. Can pass:\n                - Integer cloudlet ID\n                - String abbreviation (e.g. \"ER\") \n                - Full cloudlet name (e.g. \"Edge Redirector\")\n\n        Returns: \n            List of dictionaries containing policy information.\n        \"\"\"\n        params = f\"?includeDeleted={is_deleted}\"\n        if cloudlet_id is not None:\n            params += f\"&amp;cloudletId={self._get_cloudlet_id(cloudlet_id)}\"\n\n        return self.requester(\n            endpoint=f\"{self.endpoint}/policies{params}\", \n            method=\"GET\"\n        )\n</code></pre>"},{"location":"references/cloudlets/#akapy.Cloudlet.__init__","title":"<code>__init__(auth=None)</code>","text":"<p>Initialize Cloudlet API client.</p> <p>Parameters:</p> Name Type Description Default <code>auth</code> <p>Auth object for handling credentials. Will use default if not provided.</p> <code>None</code> Source code in <code>akapy/cloudlets/cloudlet.py</code> <pre><code>def __init__(self, auth=None) -&gt; None:\n    \"\"\"\n    Initialize Cloudlet API client.\n\n    Args:\n        auth: Auth object for handling credentials. Will use default if not provided.\n    \"\"\"\n    if auth is None:\n        self.auth = Auth()\n    else:\n        self.auth = auth\n\n    self.endpoint = \"cloudlets/api/v2\"\n    self.requester = Requester(self.auth.get_session(), self.auth.host_url)\n    self.cloudlet_types = {\n        0: {\"name\": \"Edge Redirector\", \"abbreviation\": \"ER\"},\n        1: {\"name\": \"Visitor Prioritization\", \"abbreviation\": \"VP\"},\n        3: {\"name\": \"Forward Rewrite\", \"abbreviation\": \"FR\"},\n        4: {\"name\": \"Request Control\", \"abbreviation\": \"RC\"},\n        5: {\"name\": \"API Prioritization\", \"abbreviation\": \"AP\"},\n        6: {\"name\": \"Audience Segmentation\", \"abbreviation\": \"AS\"},\n        7: {\"name\": \"Phased Release\", \"abbreviation\": \"PR\"},\n        9: {\"name\": \"Application Load Balancer\", \"abbreviation\": \"ALB\"},\n    }\n</code></pre>"},{"location":"references/cloudlets/#akapy.Cloudlet.by_type","title":"<code>by_type(cloudlet_id)</code>","text":"<p>Get cloudlet type information.</p> <p>Parameters:</p> Name Type Description Default <code>cloudlet_id</code> <code>Union[int, str]</code> <p>The cloudlet type identifier,  either as an integer or a name/abbreviation string. Cloudlet type options:     0: \"Edge Redirector\" (ER)     1: \"Visitor Prioritization\" (VP)     3: \"Forward Rewrite\" (FR)     4: \"Request Control\" (RC)     5: \"API Prioritization\" (AP)     6: \"Audience Segmentation\" (AS)     7: \"Phased Release\" (PR)     9: \"Application Load Balancer\" (ALB)</p> required <p>Returns:</p> Type Description <code>List[Dict]</code> <p>List[Dict]: List of dictionaries containing the cloudlet type information.</p> <p>This function handles looking up the cloudlet type integer ID from the name or abbreviation string if provided. It constructs the API endpoint using this integer ID and makes the request.</p> Source code in <code>akapy/cloudlets/cloudlet.py</code> <pre><code>def by_type(self, cloudlet_id: Union[int, str]) -&gt; List[Dict]:\n    \"\"\"Get cloudlet type information.\n\n    Args:\n        cloudlet_id (Union[int, str]): The cloudlet type identifier, \n            either as an integer or a name/abbreviation string.\n            Cloudlet type options:\n                0: \"Edge Redirector\" (ER)\n                1: \"Visitor Prioritization\" (VP)\n                3: \"Forward Rewrite\" (FR)\n                4: \"Request Control\" (RC)\n                5: \"API Prioritization\" (AP)\n                6: \"Audience Segmentation\" (AS)\n                7: \"Phased Release\" (PR)\n                9: \"Application Load Balancer\" (ALB)\n\n    Returns:\n        List[Dict]: List of dictionaries containing the cloudlet type information.\n\n    This function handles looking up the cloudlet type integer ID\n    from the name or abbreviation string if provided.\n    It constructs the API endpoint using this integer ID and makes the request.\n    \"\"\"\n\n    return self.requester(\n        method=\"GET\", endpoint=f\"{self.endpoint}/{self._get_cloudlet_id(cloudlet_id)}\"\n    )\n</code></pre>"},{"location":"references/cloudlets/#akapy.Cloudlet.get_all","title":"<code>get_all()</code>","text":"<p>Gets information on all cloudlets.</p> <p>Makes a GET request to the /cloudlet-info endpoint to retrieve  a list of dictionaries containing information on all available cloudlets.</p> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>List[Dict]: A list of dictionaries containing information on all cloudlets.</p> Source code in <code>akapy/cloudlets/cloudlet.py</code> <pre><code>def get_all(self) -&gt; List[Dict]:\n    \"\"\"Gets information on all cloudlets.\n\n    Makes a GET request to the /cloudlet-info endpoint to retrieve \n    a list of dictionaries containing information on all available cloudlets.\n\n    Returns:\n        List[Dict]: A list of dictionaries containing information on all cloudlets.\n    \"\"\"\n    return self.requester(method=\"GET\", endpoint=f\"{self.endpoint}/cloudlet-info\")\n</code></pre>"},{"location":"references/cloudlets/#akapy.Cloudlet.list_groups","title":"<code>list_groups()</code>","text":"<p>List all groups available to the user.</p> <p>Makes a GET request to the groups endpoint to retrieve a list containing information about the groups.</p> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>List[Dict]: List containing the group information dicts.</p> Source code in <code>akapy/cloudlets/cloudlet.py</code> <pre><code>def list_groups(self) -&gt; List[Dict]:\n    \"\"\"\n    List all groups available to the user.\n\n    Makes a GET request to the groups endpoint to retrieve a\n    list containing information about the groups.\n\n    Returns:\n        List[Dict]: List containing the group information dicts.\n    \"\"\"\n    return self.requester(endpoint=f\"{self.endpoint}/group-info\", method=\"GET\")\n</code></pre>"},{"location":"references/cloudlets/#akapy.Cloudlet.list_policies","title":"<code>list_policies(is_deleted=False, cloudlet_id=None)</code>","text":"<p>List policies filtered by deleted status and cloudlet ID.</p> <p>Parameters:</p> Name Type Description Default <code>is_deleted</code> <code>bool</code> <p>Whether to include deleted policies.</p> <code>False</code> <code>cloudlet_id</code> <code>Union[int, str, None]</code> <p>Optional cloudlet ID to filter by. Can pass: - Integer cloudlet ID - String abbreviation (e.g. \"ER\")  - Full cloudlet name (e.g. \"Edge Redirector\")</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>List of dictionaries containing policy information.</p> Source code in <code>akapy/cloudlets/cloudlet.py</code> <pre><code>def list_policies(\n    self, \n    is_deleted: bool = False, \n    cloudlet_id: Union[int, str, None] = None\n) -&gt; List[Dict]:\n    \"\"\"\n    List policies filtered by deleted status and cloudlet ID.\n\n    Args:\n        is_deleted: Whether to include deleted policies.\n        cloudlet_id: Optional cloudlet ID to filter by. Can pass:\n            - Integer cloudlet ID\n            - String abbreviation (e.g. \"ER\") \n            - Full cloudlet name (e.g. \"Edge Redirector\")\n\n    Returns: \n        List of dictionaries containing policy information.\n    \"\"\"\n    params = f\"?includeDeleted={is_deleted}\"\n    if cloudlet_id is not None:\n        params += f\"&amp;cloudletId={self._get_cloudlet_id(cloudlet_id)}\"\n\n    return self.requester(\n        endpoint=f\"{self.endpoint}/policies{params}\", \n        method=\"GET\"\n    )\n</code></pre>"},{"location":"references/cloudlets/#example-code","title":"Example Code","text":"<pre><code>import akapy as ak\n\nc = akapy.Cloudlet()\n\nprint(c.get_all())\n</code></pre>"},{"location":"references/cloudlets/#return","title":"Return","text":"<pre><code>[\n  {\n    \"serviceVersion\": null,\n    \"apiVersion\": \"2.0\",\n    \"location\": \"/cloudlets/api/v2/cloudlet-info/3\",\n    \"cloudletId\": 3,\n    \"cloudletCode\": \"FR\",\n    \"cloudletName\": \"FORWARDREWRITE\"\n  },\n  {\n    \"serviceVersion\": null,\n    \"apiVersion\": \"2.0\",\n    \"location\": \"/cloudlets/api/v2/cloudlet-info/0\",\n    \"cloudletId\": 0,\n    \"cloudletCode\": \"ER\",\n    \"cloudletName\": \"EDGEREDIRECTOR\"\n  }\n]\n</code></pre>"},{"location":"references/references/","title":"References","text":"<p>Handles authentication and creates requests session.</p> Source code in <code>akapy/auth.py</code> <pre><code>class Auth:\n    \"\"\"Handles authentication and creates requests session.\"\"\"\n\n    def __init__(\n        self,\n        EDGERC_PATH: str = \"~/.edgerc\",\n        SECTION: str = \"default\",\n        RETRY_ITERATION: int = 5,\n        RETRY_BACKOFF: int = 1,\n    ) -&gt; None:\n        \"\"\"\n        Initialize authentication and create requests session.\n\n        Args:\n            EDGERC_PATH: Path to .edgerc file\n            SECTION: Section in .edgerc file\n            RETRY_ITERATION: Number of retries\n            RETRY_BACKOFF: Backoff factor between retries\n        \"\"\"\n\n        self.SECTION = SECTION\n        self.EDGERC = EdgeRc(EDGERC_PATH)\n        self.HOSTURL = f\"https://{self.EDGERC.get(self.SECTION, 'host')}\"\n        self.SESSION = requests.Session()\n\n        self.RETRY_STRATEGY = Retry(\n            total=RETRY_ITERATION,\n            backoff_factor=RETRY_BACKOFF,\n            status_forcelist=tuple(range(500, 600)),\n            allowed_methods=frozenset([\"DELETE\", \"GET\", \"POST\", \"PUT\"]),\n        )\n\n        self.ADAPTER = HTTPAdapter(max_retries=self.RETRY_STRATEGY)\n        self.SESSION.mount(\"http://\", self.ADAPTER)\n        self.SESSION.mount(\"https://\", self.ADAPTER)\n\n        self.SESSION.auth = EdgeGridAuth.from_edgerc(self.EDGERC, self.SECTION)\n\n    def get_session(self):\n        \"\"\"Returns the requests session.\"\"\"\n        return self.SESSION\n\n    @property\n    def host_url(self):\n        \"\"\"Returns the base API host URL.\"\"\"\n        return self.HOSTURL\n</code></pre> Source code in <code>akapy/requester.py</code> <pre><code>class Requester:\n    def __init__(self, session, host_url):\n        self.HEADERS = {\"accept\": \"application/json\"}\n        self.session = session\n        self.host_url = host_url\n        self.response_cache = {}\n\n    def print_error(self, message: str, response):\n        \"\"\"Print error message and response (if provided).\"\"\"\n        print(\"=\" * shutil.get_terminal_size().columns)\n        print(message)\n        if response:\n            pprint(response)\n\n    def make_request(\n        self, endpoint: str, method: Union[\"GET\", \"POST\", \"PUT\", \"DELETE\"], **kwargs\n    ) -&gt; Dict:\n        \"\"\"\n        Make API request to endpoint.\n\n        Args:\n            endpoint: API endpoint\n            method: HTTP method\n            kwargs: Parameters to pass to requests method\n\n        Returns:\n            JSON response\n        \"\"\"\n        if not isinstance(kwargs, dict):\n            raise TypeError(\"Final argument must be of dictionary type\")\n\n        if endpoint in self.response_cache:\n            return self.response_cache[endpoint].json()\n\n        try:\n            response = getattr(self.session, method.lower())(\n                urljoin(self.host_url, endpoint),\n                **kwargs,\n                headers=self.HEADERS,\n            )\n            response.raise_for_status()\n            self.response_cache[endpoint] = response\n            return response.json()\n\n        except requests.exceptions.HTTPError as e:\n            self.print_error(\"HTTP ERROR\", e)\n            return {}\n\n        except requests.exceptions.ConnectionError as e:\n            self.print_error(\"CONNECTION ERROR\", e)\n            return {}\n\n        except requests.exceptions.Timeout as e:\n            self.print_error(\"TIMEOUT OCCURRED\", e)\n            return {}\n\n        except requests.exceptions.RequestException as e:\n            self.print_error(\"SOME ERROR OCCURRED\", e)\n            return {}\n\n    def __call__(self, **kwargs: Any) -&gt; Any:\n        return self.make_request(**kwargs)\n</code></pre> <p>Handles Cloudlet API requests.</p> Source code in <code>akapy/cloudlets/cloudlet.py</code> <pre><code>class Cloudlet:\n    \"\"\"Handles Cloudlet API requests.\"\"\"\n\n    def __init__(self, auth=None) -&gt; None:\n        \"\"\"\n        Initialize Cloudlet API client.\n\n        Args:\n            auth: Auth object for handling credentials. Will use default if not provided.\n        \"\"\"\n        if auth is None:\n            self.auth = Auth()\n        else:\n            self.auth = auth\n\n        self.endpoint = \"cloudlets/api/v2\"\n        self.requester = Requester(self.auth.get_session(), self.auth.host_url)\n        self.cloudlet_types = {\n            0: {\"name\": \"Edge Redirector\", \"abbreviation\": \"ER\"},\n            1: {\"name\": \"Visitor Prioritization\", \"abbreviation\": \"VP\"},\n            3: {\"name\": \"Forward Rewrite\", \"abbreviation\": \"FR\"},\n            4: {\"name\": \"Request Control\", \"abbreviation\": \"RC\"},\n            5: {\"name\": \"API Prioritization\", \"abbreviation\": \"AP\"},\n            6: {\"name\": \"Audience Segmentation\", \"abbreviation\": \"AS\"},\n            7: {\"name\": \"Phased Release\", \"abbreviation\": \"PR\"},\n            9: {\"name\": \"Application Load Balancer\", \"abbreviation\": \"ALB\"},\n        }\n\n    def _get_cloudlet_id(self, cloudlet_id: Union[int, str]) -&gt; Union[int, None]:\n        \"\"\"Converts a cloudlet ID to an integer.\n\n        Args:\n            cloudlet_id (Union[int, str]): The cloudlet ID, either as an integer\n                or a string name/abbreviation.\n\n        Returns:\n            int: The integer cloudlet ID.\n\n        This handles looking up the integer ID from the name/abbreviation\n        if a string is provided.\n        \"\"\"\n        cloudlet_type_int = None\n        if isinstance(cloudlet_id, int):\n            cloudlet_type_int = cloudlet_id\n        else:\n            for k, v in self.cloudlet_types.items():\n                if cloudlet_id in (v[\"name\"], v[\"abbreviation\"]):\n                    cloudlet_type_int = k\n                    break\n        return cloudlet_type_int\n\n    def get_all(self) -&gt; List[Dict]:\n        \"\"\"Gets information on all cloudlets.\n\n        Makes a GET request to the /cloudlet-info endpoint to retrieve \n        a list of dictionaries containing information on all available cloudlets.\n\n        Returns:\n            List[Dict]: A list of dictionaries containing information on all cloudlets.\n        \"\"\"\n        return self.requester(method=\"GET\", endpoint=f\"{self.endpoint}/cloudlet-info\")\n\n    def by_type(self, cloudlet_id: Union[int, str]) -&gt; List[Dict]:\n        \"\"\"Get cloudlet type information.\n\n        Args:\n            cloudlet_id (Union[int, str]): The cloudlet type identifier, \n                either as an integer or a name/abbreviation string.\n                Cloudlet type options:\n                    0: \"Edge Redirector\" (ER)\n                    1: \"Visitor Prioritization\" (VP)\n                    3: \"Forward Rewrite\" (FR)\n                    4: \"Request Control\" (RC)\n                    5: \"API Prioritization\" (AP)\n                    6: \"Audience Segmentation\" (AS)\n                    7: \"Phased Release\" (PR)\n                    9: \"Application Load Balancer\" (ALB)\n\n        Returns:\n            List[Dict]: List of dictionaries containing the cloudlet type information.\n\n        This function handles looking up the cloudlet type integer ID\n        from the name or abbreviation string if provided.\n        It constructs the API endpoint using this integer ID and makes the request.\n        \"\"\"\n\n        return self.requester(\n            method=\"GET\", endpoint=f\"{self.endpoint}/{self._get_cloudlet_id(cloudlet_id)}\"\n        )\n\n    def list_groups(self) -&gt; List[Dict]:\n        \"\"\"\n        List all groups available to the user.\n\n        Makes a GET request to the groups endpoint to retrieve a\n        list containing information about the groups.\n\n        Returns:\n            List[Dict]: List containing the group information dicts.\n        \"\"\"\n        return self.requester(endpoint=f\"{self.endpoint}/group-info\", method=\"GET\")\n\n    def list_policies(\n        self, \n        is_deleted: bool = False, \n        cloudlet_id: Union[int, str, None] = None\n    ) -&gt; List[Dict]:\n        \"\"\"\n        List policies filtered by deleted status and cloudlet ID.\n\n        Args:\n            is_deleted: Whether to include deleted policies.\n            cloudlet_id: Optional cloudlet ID to filter by. Can pass:\n                - Integer cloudlet ID\n                - String abbreviation (e.g. \"ER\") \n                - Full cloudlet name (e.g. \"Edge Redirector\")\n\n        Returns: \n            List of dictionaries containing policy information.\n        \"\"\"\n        params = f\"?includeDeleted={is_deleted}\"\n        if cloudlet_id is not None:\n            params += f\"&amp;cloudletId={self._get_cloudlet_id(cloudlet_id)}\"\n\n        return self.requester(\n            endpoint=f\"{self.endpoint}/policies{params}\", \n            method=\"GET\"\n        )\n</code></pre>"},{"location":"references/references/#akapy.__version__","title":"<code>__version__ = '0.3.1'</code>  <code>module-attribute</code>","text":"<p>The akapy package imports the Auth, Cloudlet, and Requester classes, as well as defines the version variable.</p> <p>The Auth class provides authentication functionality. The Cloudlet class represents a cloudlet resource and operations on it. The Requester provides a request client for making API calls.</p> <p>Together this allows akapy to authenticate with a service, access cloudlet resources,  and make API requests to manage and utilize cloudlets. The version provides the package version.</p>"},{"location":"references/references/#akapy.Auth.host_url","title":"<code>host_url</code>  <code>property</code>","text":"<p>Returns the base API host URL.</p>"},{"location":"references/references/#akapy.Auth.__init__","title":"<code>__init__(EDGERC_PATH='~/.edgerc', SECTION='default', RETRY_ITERATION=5, RETRY_BACKOFF=1)</code>","text":"<p>Initialize authentication and create requests session.</p> <p>Parameters:</p> Name Type Description Default <code>EDGERC_PATH</code> <code>str</code> <p>Path to .edgerc file</p> <code>'~/.edgerc'</code> <code>SECTION</code> <code>str</code> <p>Section in .edgerc file</p> <code>'default'</code> <code>RETRY_ITERATION</code> <code>int</code> <p>Number of retries</p> <code>5</code> <code>RETRY_BACKOFF</code> <code>int</code> <p>Backoff factor between retries</p> <code>1</code> Source code in <code>akapy/auth.py</code> <pre><code>def __init__(\n    self,\n    EDGERC_PATH: str = \"~/.edgerc\",\n    SECTION: str = \"default\",\n    RETRY_ITERATION: int = 5,\n    RETRY_BACKOFF: int = 1,\n) -&gt; None:\n    \"\"\"\n    Initialize authentication and create requests session.\n\n    Args:\n        EDGERC_PATH: Path to .edgerc file\n        SECTION: Section in .edgerc file\n        RETRY_ITERATION: Number of retries\n        RETRY_BACKOFF: Backoff factor between retries\n    \"\"\"\n\n    self.SECTION = SECTION\n    self.EDGERC = EdgeRc(EDGERC_PATH)\n    self.HOSTURL = f\"https://{self.EDGERC.get(self.SECTION, 'host')}\"\n    self.SESSION = requests.Session()\n\n    self.RETRY_STRATEGY = Retry(\n        total=RETRY_ITERATION,\n        backoff_factor=RETRY_BACKOFF,\n        status_forcelist=tuple(range(500, 600)),\n        allowed_methods=frozenset([\"DELETE\", \"GET\", \"POST\", \"PUT\"]),\n    )\n\n    self.ADAPTER = HTTPAdapter(max_retries=self.RETRY_STRATEGY)\n    self.SESSION.mount(\"http://\", self.ADAPTER)\n    self.SESSION.mount(\"https://\", self.ADAPTER)\n\n    self.SESSION.auth = EdgeGridAuth.from_edgerc(self.EDGERC, self.SECTION)\n</code></pre>"},{"location":"references/references/#akapy.Auth.get_session","title":"<code>get_session()</code>","text":"<p>Returns the requests session.</p> Source code in <code>akapy/auth.py</code> <pre><code>def get_session(self):\n    \"\"\"Returns the requests session.\"\"\"\n    return self.SESSION\n</code></pre>"},{"location":"references/references/#akapy.Requester.make_request","title":"<code>make_request(endpoint, method, **kwargs)</code>","text":"<p>Make API request to endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>API endpoint</p> required <code>method</code> <code>Union[GET, POST, PUT, DELETE]</code> <p>HTTP method</p> required <code>kwargs</code> <p>Parameters to pass to requests method</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict</code> <p>JSON response</p> Source code in <code>akapy/requester.py</code> <pre><code>def make_request(\n    self, endpoint: str, method: Union[\"GET\", \"POST\", \"PUT\", \"DELETE\"], **kwargs\n) -&gt; Dict:\n    \"\"\"\n    Make API request to endpoint.\n\n    Args:\n        endpoint: API endpoint\n        method: HTTP method\n        kwargs: Parameters to pass to requests method\n\n    Returns:\n        JSON response\n    \"\"\"\n    if not isinstance(kwargs, dict):\n        raise TypeError(\"Final argument must be of dictionary type\")\n\n    if endpoint in self.response_cache:\n        return self.response_cache[endpoint].json()\n\n    try:\n        response = getattr(self.session, method.lower())(\n            urljoin(self.host_url, endpoint),\n            **kwargs,\n            headers=self.HEADERS,\n        )\n        response.raise_for_status()\n        self.response_cache[endpoint] = response\n        return response.json()\n\n    except requests.exceptions.HTTPError as e:\n        self.print_error(\"HTTP ERROR\", e)\n        return {}\n\n    except requests.exceptions.ConnectionError as e:\n        self.print_error(\"CONNECTION ERROR\", e)\n        return {}\n\n    except requests.exceptions.Timeout as e:\n        self.print_error(\"TIMEOUT OCCURRED\", e)\n        return {}\n\n    except requests.exceptions.RequestException as e:\n        self.print_error(\"SOME ERROR OCCURRED\", e)\n        return {}\n</code></pre>"},{"location":"references/references/#akapy.Requester.print_error","title":"<code>print_error(message, response)</code>","text":"<p>Print error message and response (if provided).</p> Source code in <code>akapy/requester.py</code> <pre><code>def print_error(self, message: str, response):\n    \"\"\"Print error message and response (if provided).\"\"\"\n    print(\"=\" * shutil.get_terminal_size().columns)\n    print(message)\n    if response:\n        pprint(response)\n</code></pre>"},{"location":"references/references/#akapy.Cloudlet.__init__","title":"<code>__init__(auth=None)</code>","text":"<p>Initialize Cloudlet API client.</p> <p>Parameters:</p> Name Type Description Default <code>auth</code> <p>Auth object for handling credentials. Will use default if not provided.</p> <code>None</code> Source code in <code>akapy/cloudlets/cloudlet.py</code> <pre><code>def __init__(self, auth=None) -&gt; None:\n    \"\"\"\n    Initialize Cloudlet API client.\n\n    Args:\n        auth: Auth object for handling credentials. Will use default if not provided.\n    \"\"\"\n    if auth is None:\n        self.auth = Auth()\n    else:\n        self.auth = auth\n\n    self.endpoint = \"cloudlets/api/v2\"\n    self.requester = Requester(self.auth.get_session(), self.auth.host_url)\n    self.cloudlet_types = {\n        0: {\"name\": \"Edge Redirector\", \"abbreviation\": \"ER\"},\n        1: {\"name\": \"Visitor Prioritization\", \"abbreviation\": \"VP\"},\n        3: {\"name\": \"Forward Rewrite\", \"abbreviation\": \"FR\"},\n        4: {\"name\": \"Request Control\", \"abbreviation\": \"RC\"},\n        5: {\"name\": \"API Prioritization\", \"abbreviation\": \"AP\"},\n        6: {\"name\": \"Audience Segmentation\", \"abbreviation\": \"AS\"},\n        7: {\"name\": \"Phased Release\", \"abbreviation\": \"PR\"},\n        9: {\"name\": \"Application Load Balancer\", \"abbreviation\": \"ALB\"},\n    }\n</code></pre>"},{"location":"references/references/#akapy.Cloudlet.by_type","title":"<code>by_type(cloudlet_id)</code>","text":"<p>Get cloudlet type information.</p> <p>Parameters:</p> Name Type Description Default <code>cloudlet_id</code> <code>Union[int, str]</code> <p>The cloudlet type identifier,  either as an integer or a name/abbreviation string. Cloudlet type options:     0: \"Edge Redirector\" (ER)     1: \"Visitor Prioritization\" (VP)     3: \"Forward Rewrite\" (FR)     4: \"Request Control\" (RC)     5: \"API Prioritization\" (AP)     6: \"Audience Segmentation\" (AS)     7: \"Phased Release\" (PR)     9: \"Application Load Balancer\" (ALB)</p> required <p>Returns:</p> Type Description <code>List[Dict]</code> <p>List[Dict]: List of dictionaries containing the cloudlet type information.</p> <p>This function handles looking up the cloudlet type integer ID from the name or abbreviation string if provided. It constructs the API endpoint using this integer ID and makes the request.</p> Source code in <code>akapy/cloudlets/cloudlet.py</code> <pre><code>def by_type(self, cloudlet_id: Union[int, str]) -&gt; List[Dict]:\n    \"\"\"Get cloudlet type information.\n\n    Args:\n        cloudlet_id (Union[int, str]): The cloudlet type identifier, \n            either as an integer or a name/abbreviation string.\n            Cloudlet type options:\n                0: \"Edge Redirector\" (ER)\n                1: \"Visitor Prioritization\" (VP)\n                3: \"Forward Rewrite\" (FR)\n                4: \"Request Control\" (RC)\n                5: \"API Prioritization\" (AP)\n                6: \"Audience Segmentation\" (AS)\n                7: \"Phased Release\" (PR)\n                9: \"Application Load Balancer\" (ALB)\n\n    Returns:\n        List[Dict]: List of dictionaries containing the cloudlet type information.\n\n    This function handles looking up the cloudlet type integer ID\n    from the name or abbreviation string if provided.\n    It constructs the API endpoint using this integer ID and makes the request.\n    \"\"\"\n\n    return self.requester(\n        method=\"GET\", endpoint=f\"{self.endpoint}/{self._get_cloudlet_id(cloudlet_id)}\"\n    )\n</code></pre>"},{"location":"references/references/#akapy.Cloudlet.get_all","title":"<code>get_all()</code>","text":"<p>Gets information on all cloudlets.</p> <p>Makes a GET request to the /cloudlet-info endpoint to retrieve  a list of dictionaries containing information on all available cloudlets.</p> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>List[Dict]: A list of dictionaries containing information on all cloudlets.</p> Source code in <code>akapy/cloudlets/cloudlet.py</code> <pre><code>def get_all(self) -&gt; List[Dict]:\n    \"\"\"Gets information on all cloudlets.\n\n    Makes a GET request to the /cloudlet-info endpoint to retrieve \n    a list of dictionaries containing information on all available cloudlets.\n\n    Returns:\n        List[Dict]: A list of dictionaries containing information on all cloudlets.\n    \"\"\"\n    return self.requester(method=\"GET\", endpoint=f\"{self.endpoint}/cloudlet-info\")\n</code></pre>"},{"location":"references/references/#akapy.Cloudlet.list_groups","title":"<code>list_groups()</code>","text":"<p>List all groups available to the user.</p> <p>Makes a GET request to the groups endpoint to retrieve a list containing information about the groups.</p> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>List[Dict]: List containing the group information dicts.</p> Source code in <code>akapy/cloudlets/cloudlet.py</code> <pre><code>def list_groups(self) -&gt; List[Dict]:\n    \"\"\"\n    List all groups available to the user.\n\n    Makes a GET request to the groups endpoint to retrieve a\n    list containing information about the groups.\n\n    Returns:\n        List[Dict]: List containing the group information dicts.\n    \"\"\"\n    return self.requester(endpoint=f\"{self.endpoint}/group-info\", method=\"GET\")\n</code></pre>"},{"location":"references/references/#akapy.Cloudlet.list_policies","title":"<code>list_policies(is_deleted=False, cloudlet_id=None)</code>","text":"<p>List policies filtered by deleted status and cloudlet ID.</p> <p>Parameters:</p> Name Type Description Default <code>is_deleted</code> <code>bool</code> <p>Whether to include deleted policies.</p> <code>False</code> <code>cloudlet_id</code> <code>Union[int, str, None]</code> <p>Optional cloudlet ID to filter by. Can pass: - Integer cloudlet ID - String abbreviation (e.g. \"ER\")  - Full cloudlet name (e.g. \"Edge Redirector\")</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Dict]</code> <p>List of dictionaries containing policy information.</p> Source code in <code>akapy/cloudlets/cloudlet.py</code> <pre><code>def list_policies(\n    self, \n    is_deleted: bool = False, \n    cloudlet_id: Union[int, str, None] = None\n) -&gt; List[Dict]:\n    \"\"\"\n    List policies filtered by deleted status and cloudlet ID.\n\n    Args:\n        is_deleted: Whether to include deleted policies.\n        cloudlet_id: Optional cloudlet ID to filter by. Can pass:\n            - Integer cloudlet ID\n            - String abbreviation (e.g. \"ER\") \n            - Full cloudlet name (e.g. \"Edge Redirector\")\n\n    Returns: \n        List of dictionaries containing policy information.\n    \"\"\"\n    params = f\"?includeDeleted={is_deleted}\"\n    if cloudlet_id is not None:\n        params += f\"&amp;cloudletId={self._get_cloudlet_id(cloudlet_id)}\"\n\n    return self.requester(\n        endpoint=f\"{self.endpoint}/policies{params}\", \n        method=\"GET\"\n    )\n</code></pre>"}]}