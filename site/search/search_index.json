{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Akapy","text":"<p>Home to the best Akamai API wrapper written in Python this side of the Mississippi!</p>"},{"location":"references/akapy/","title":"Akapy Base","text":""},{"location":"references/akapy/#akapy.__version__","title":"<code>__version__ = '0.1.0'</code>  <code>module-attribute</code>","text":"<p>The akapy package imports the Auth, Cloudlet, and Requester classes, as well as defines the version variable.</p> <p>The Auth class provides authentication functionality. The Cloudlet class represents a cloudlet resource and operations on it. The Requester provides a request client for making API calls.</p> <p>Together this allows akapy to authenticate with a service, access cloudlet resources,  and make API requests to manage and utilize cloudlets. The version provides the package version.</p>"},{"location":"references/auth/","title":"Auth","text":"<p>Handles authentication and creates requests session.</p> Source code in <code>akapy/auth.py</code> <pre><code>class Auth:\n    \"\"\"Handles authentication and creates requests session.\"\"\"\n\n    def __init__(\n        self,\n        EDGERC_PATH: str = \"~/.edgerc\",\n        SECTION: str = \"default\",\n        RETRY_ITERATION: int = 5,\n        RETRY_BACKOFF: int = 1,\n    ) -&gt; None:\n        \"\"\"\n        Initialize authentication and create requests session.\n\n        Args:\n            EDGERC_PATH: Path to .edgerc file\n            SECTION: Section in .edgerc file\n            RETRY_ITERATION: Number of retries\n            RETRY_BACKOFF: Backoff factor between retries\n        \"\"\"\n\n        self.SECTION = SECTION\n        self.EDGERC = EdgeRc(EDGERC_PATH)\n        self.HOSTURL = f\"https://{self.EDGERC.get(self.SECTION, 'host')}\"\n        self.SESSION = requests.Session()\n\n        self.RETRY_STRATEGY = Retry(\n            total=RETRY_ITERATION,\n            backoff_factor=RETRY_BACKOFF,\n            status_forcelist=tuple(range(500, 600)),\n            allowed_methods=frozenset([\"DELETE\", \"GET\", \"POST\", \"PUT\"]),\n        )\n\n        self.ADAPTER = HTTPAdapter(max_retries=self.RETRY_STRATEGY)\n        self.SESSION.mount(\"http://\", self.ADAPTER)\n        self.SESSION.mount(\"https://\", self.ADAPTER)\n\n        self.SESSION.auth = EdgeGridAuth.from_edgerc(self.EDGERC, self.SECTION)\n\n    def get_session(self):\n        \"\"\"Returns the requests session.\"\"\"\n        return self.SESSION\n\n    @property\n    def host_url(self):\n        \"\"\"Returns the base API host URL.\"\"\"\n        return self.HOSTURL\n</code></pre>"},{"location":"references/auth/#akapy.Auth.host_url","title":"<code>host_url</code>  <code>property</code>","text":"<p>Returns the base API host URL.</p>"},{"location":"references/auth/#akapy.Auth.__init__","title":"<code>__init__(EDGERC_PATH='~/.edgerc', SECTION='default', RETRY_ITERATION=5, RETRY_BACKOFF=1)</code>","text":"<p>Initialize authentication and create requests session.</p> <p>Parameters:</p> Name Type Description Default <code>EDGERC_PATH</code> <code>str</code> <p>Path to .edgerc file</p> <code>'~/.edgerc'</code> <code>SECTION</code> <code>str</code> <p>Section in .edgerc file</p> <code>'default'</code> <code>RETRY_ITERATION</code> <code>int</code> <p>Number of retries</p> <code>5</code> <code>RETRY_BACKOFF</code> <code>int</code> <p>Backoff factor between retries</p> <code>1</code> Source code in <code>akapy/auth.py</code> <pre><code>def __init__(\n    self,\n    EDGERC_PATH: str = \"~/.edgerc\",\n    SECTION: str = \"default\",\n    RETRY_ITERATION: int = 5,\n    RETRY_BACKOFF: int = 1,\n) -&gt; None:\n    \"\"\"\n    Initialize authentication and create requests session.\n\n    Args:\n        EDGERC_PATH: Path to .edgerc file\n        SECTION: Section in .edgerc file\n        RETRY_ITERATION: Number of retries\n        RETRY_BACKOFF: Backoff factor between retries\n    \"\"\"\n\n    self.SECTION = SECTION\n    self.EDGERC = EdgeRc(EDGERC_PATH)\n    self.HOSTURL = f\"https://{self.EDGERC.get(self.SECTION, 'host')}\"\n    self.SESSION = requests.Session()\n\n    self.RETRY_STRATEGY = Retry(\n        total=RETRY_ITERATION,\n        backoff_factor=RETRY_BACKOFF,\n        status_forcelist=tuple(range(500, 600)),\n        allowed_methods=frozenset([\"DELETE\", \"GET\", \"POST\", \"PUT\"]),\n    )\n\n    self.ADAPTER = HTTPAdapter(max_retries=self.RETRY_STRATEGY)\n    self.SESSION.mount(\"http://\", self.ADAPTER)\n    self.SESSION.mount(\"https://\", self.ADAPTER)\n\n    self.SESSION.auth = EdgeGridAuth.from_edgerc(self.EDGERC, self.SECTION)\n</code></pre>"},{"location":"references/auth/#akapy.Auth.get_session","title":"<code>get_session()</code>","text":"<p>Returns the requests session.</p> Source code in <code>akapy/auth.py</code> <pre><code>def get_session(self):\n    \"\"\"Returns the requests session.\"\"\"\n    return self.SESSION\n</code></pre>"},{"location":"references/cloudlets/","title":"How to use Cloudlets","text":"<p>Handles Cloudlet API requests.</p> Source code in <code>akapy/cloudlets/cloudlet.py</code> <pre><code>class Cloudlet:\n    \"\"\"Handles Cloudlet API requests.\"\"\"\n\n    def __init__(self, auth=None) -&gt; None:\n        \"\"\"\n        Initialize Cloudlet API client.\n\n        Args:\n            auth: Auth object for handling credentials. Will use default if not provided.\n        \"\"\"\n        if auth is None:\n            self.auth = Auth()\n        else:\n            self.auth = auth\n\n        self.endpoint = \"cloudlets/api/v2\"\n        self.requester = Requester(self.auth.get_session(), self.auth.host_url)\n\n    def get_all(self):\n        return self.requester.make_request(\n            method = \"GET\",\n            endpoint = f\"{self.endpoint}/cloudlet-info\"\n        )\n</code></pre> Source code in <code>akapy/cloudlets/cloudlet.py</code> <pre><code>def get_all(self):\n    return self.requester.make_request(\n        method = \"GET\",\n        endpoint = f\"{self.endpoint}/cloudlet-info\"\n    )\n</code></pre>"},{"location":"references/cloudlets/#akapy.Cloudlet.__init__","title":"<code>__init__(auth=None)</code>","text":"<p>Initialize Cloudlet API client.</p> <p>Parameters:</p> Name Type Description Default <code>auth</code> <p>Auth object for handling credentials. Will use default if not provided.</p> <code>None</code> Source code in <code>akapy/cloudlets/cloudlet.py</code> <pre><code>def __init__(self, auth=None) -&gt; None:\n    \"\"\"\n    Initialize Cloudlet API client.\n\n    Args:\n        auth: Auth object for handling credentials. Will use default if not provided.\n    \"\"\"\n    if auth is None:\n        self.auth = Auth()\n    else:\n        self.auth = auth\n\n    self.endpoint = \"cloudlets/api/v2\"\n    self.requester = Requester(self.auth.get_session(), self.auth.host_url)\n</code></pre>"},{"location":"references/references/","title":"References","text":"<p>Handles authentication and creates requests session.</p> Source code in <code>akapy/auth.py</code> <pre><code>class Auth:\n    \"\"\"Handles authentication and creates requests session.\"\"\"\n\n    def __init__(\n        self,\n        EDGERC_PATH: str = \"~/.edgerc\",\n        SECTION: str = \"default\",\n        RETRY_ITERATION: int = 5,\n        RETRY_BACKOFF: int = 1,\n    ) -&gt; None:\n        \"\"\"\n        Initialize authentication and create requests session.\n\n        Args:\n            EDGERC_PATH: Path to .edgerc file\n            SECTION: Section in .edgerc file\n            RETRY_ITERATION: Number of retries\n            RETRY_BACKOFF: Backoff factor between retries\n        \"\"\"\n\n        self.SECTION = SECTION\n        self.EDGERC = EdgeRc(EDGERC_PATH)\n        self.HOSTURL = f\"https://{self.EDGERC.get(self.SECTION, 'host')}\"\n        self.SESSION = requests.Session()\n\n        self.RETRY_STRATEGY = Retry(\n            total=RETRY_ITERATION,\n            backoff_factor=RETRY_BACKOFF,\n            status_forcelist=tuple(range(500, 600)),\n            allowed_methods=frozenset([\"DELETE\", \"GET\", \"POST\", \"PUT\"]),\n        )\n\n        self.ADAPTER = HTTPAdapter(max_retries=self.RETRY_STRATEGY)\n        self.SESSION.mount(\"http://\", self.ADAPTER)\n        self.SESSION.mount(\"https://\", self.ADAPTER)\n\n        self.SESSION.auth = EdgeGridAuth.from_edgerc(self.EDGERC, self.SECTION)\n\n    def get_session(self):\n        \"\"\"Returns the requests session.\"\"\"\n        return self.SESSION\n\n    @property\n    def host_url(self):\n        \"\"\"Returns the base API host URL.\"\"\"\n        return self.HOSTURL\n</code></pre> Source code in <code>akapy/requester.py</code> <pre><code>class Requester:\n    def __init__(self, session, host_url):\n        self.HEADERS = {\"accept\": \"application/json\"}\n        self.session = session\n        self.host_url = host_url\n        self.response_cache = {}\n\n    def print_error(self, message, response):\n        \"\"\"Print error message and response (if provided).\"\"\"\n        print(\"=\" * shutil.get_terminal_size().columns)\n        print(message)\n        if response:\n            pprint(response)\n\n    def make_request(self, endpoint, method, **kwargs) -&gt; dict:\n        \"\"\"\n        Make API request to endpoint.\n\n        Args:\n            endpoint: API endpoint\n            method: HTTP method\n            kwargs: Parameters to pass to requests method\n\n        Returns:\n            JSON response\n        \"\"\"\n        if not isinstance(kwargs, dict):\n            raise TypeError(\"Final argument must be of dictionary type\")\n\n        if endpoint in self.response_cache:\n            return self.response_cache[endpoint].json()\n\n        try:\n            response = getattr(self.session, method.lower())(\n                urljoin(self.host_url, endpoint),\n                **kwargs,\n                headers=self.HEADERS,\n            )\n            response.raise_for_status()\n            self.response_cache[endpoint] = response\n            return response.json()\n\n        except requests.exceptions.HTTPError as e:\n            self.print_error(\"HTTP ERROR\", e)\n            return {}\n\n        except requests.exceptions.ConnectionError as e:\n            self.print_error(\"CONNECTION ERROR\", e)\n            return {}\n\n        except requests.exceptions.Timeout as e:\n            self.print_error(\"TIMEOUT OCCURRED\", e)\n            return {}\n\n        except requests.exceptions.RequestException as e:\n            self.print_error(\"SOME ERROR OCCURRED\", e)\n            return {}\n</code></pre> <p>Handles Cloudlet API requests.</p> Source code in <code>akapy/cloudlets/cloudlet.py</code> <pre><code>class Cloudlet:\n    \"\"\"Handles Cloudlet API requests.\"\"\"\n\n    def __init__(self, auth=None) -&gt; None:\n        \"\"\"\n        Initialize Cloudlet API client.\n\n        Args:\n            auth: Auth object for handling credentials. Will use default if not provided.\n        \"\"\"\n        if auth is None:\n            self.auth = Auth()\n        else:\n            self.auth = auth\n\n        self.endpoint = \"cloudlets/api/v2\"\n        self.requester = Requester(self.auth.get_session(), self.auth.host_url)\n\n    def get_all(self):\n        return self.requester.make_request(\n            method = \"GET\",\n            endpoint = f\"{self.endpoint}/cloudlet-info\"\n        )\n</code></pre>"},{"location":"references/references/#akapy.__version__","title":"<code>__version__ = '0.1.0'</code>  <code>module-attribute</code>","text":"<p>The akapy package imports the Auth, Cloudlet, and Requester classes, as well as defines the version variable.</p> <p>The Auth class provides authentication functionality. The Cloudlet class represents a cloudlet resource and operations on it. The Requester provides a request client for making API calls.</p> <p>Together this allows akapy to authenticate with a service, access cloudlet resources,  and make API requests to manage and utilize cloudlets. The version provides the package version.</p>"},{"location":"references/references/#akapy.Auth.host_url","title":"<code>host_url</code>  <code>property</code>","text":"<p>Returns the base API host URL.</p>"},{"location":"references/references/#akapy.Auth.__init__","title":"<code>__init__(EDGERC_PATH='~/.edgerc', SECTION='default', RETRY_ITERATION=5, RETRY_BACKOFF=1)</code>","text":"<p>Initialize authentication and create requests session.</p> <p>Parameters:</p> Name Type Description Default <code>EDGERC_PATH</code> <code>str</code> <p>Path to .edgerc file</p> <code>'~/.edgerc'</code> <code>SECTION</code> <code>str</code> <p>Section in .edgerc file</p> <code>'default'</code> <code>RETRY_ITERATION</code> <code>int</code> <p>Number of retries</p> <code>5</code> <code>RETRY_BACKOFF</code> <code>int</code> <p>Backoff factor between retries</p> <code>1</code> Source code in <code>akapy/auth.py</code> <pre><code>def __init__(\n    self,\n    EDGERC_PATH: str = \"~/.edgerc\",\n    SECTION: str = \"default\",\n    RETRY_ITERATION: int = 5,\n    RETRY_BACKOFF: int = 1,\n) -&gt; None:\n    \"\"\"\n    Initialize authentication and create requests session.\n\n    Args:\n        EDGERC_PATH: Path to .edgerc file\n        SECTION: Section in .edgerc file\n        RETRY_ITERATION: Number of retries\n        RETRY_BACKOFF: Backoff factor between retries\n    \"\"\"\n\n    self.SECTION = SECTION\n    self.EDGERC = EdgeRc(EDGERC_PATH)\n    self.HOSTURL = f\"https://{self.EDGERC.get(self.SECTION, 'host')}\"\n    self.SESSION = requests.Session()\n\n    self.RETRY_STRATEGY = Retry(\n        total=RETRY_ITERATION,\n        backoff_factor=RETRY_BACKOFF,\n        status_forcelist=tuple(range(500, 600)),\n        allowed_methods=frozenset([\"DELETE\", \"GET\", \"POST\", \"PUT\"]),\n    )\n\n    self.ADAPTER = HTTPAdapter(max_retries=self.RETRY_STRATEGY)\n    self.SESSION.mount(\"http://\", self.ADAPTER)\n    self.SESSION.mount(\"https://\", self.ADAPTER)\n\n    self.SESSION.auth = EdgeGridAuth.from_edgerc(self.EDGERC, self.SECTION)\n</code></pre>"},{"location":"references/references/#akapy.Auth.get_session","title":"<code>get_session()</code>","text":"<p>Returns the requests session.</p> Source code in <code>akapy/auth.py</code> <pre><code>def get_session(self):\n    \"\"\"Returns the requests session.\"\"\"\n    return self.SESSION\n</code></pre>"},{"location":"references/references/#akapy.Requester.make_request","title":"<code>make_request(endpoint, method, **kwargs)</code>","text":"<p>Make API request to endpoint.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <p>API endpoint</p> required <code>method</code> <p>HTTP method</p> required <code>kwargs</code> <p>Parameters to pass to requests method</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>JSON response</p> Source code in <code>akapy/requester.py</code> <pre><code>def make_request(self, endpoint, method, **kwargs) -&gt; dict:\n    \"\"\"\n    Make API request to endpoint.\n\n    Args:\n        endpoint: API endpoint\n        method: HTTP method\n        kwargs: Parameters to pass to requests method\n\n    Returns:\n        JSON response\n    \"\"\"\n    if not isinstance(kwargs, dict):\n        raise TypeError(\"Final argument must be of dictionary type\")\n\n    if endpoint in self.response_cache:\n        return self.response_cache[endpoint].json()\n\n    try:\n        response = getattr(self.session, method.lower())(\n            urljoin(self.host_url, endpoint),\n            **kwargs,\n            headers=self.HEADERS,\n        )\n        response.raise_for_status()\n        self.response_cache[endpoint] = response\n        return response.json()\n\n    except requests.exceptions.HTTPError as e:\n        self.print_error(\"HTTP ERROR\", e)\n        return {}\n\n    except requests.exceptions.ConnectionError as e:\n        self.print_error(\"CONNECTION ERROR\", e)\n        return {}\n\n    except requests.exceptions.Timeout as e:\n        self.print_error(\"TIMEOUT OCCURRED\", e)\n        return {}\n\n    except requests.exceptions.RequestException as e:\n        self.print_error(\"SOME ERROR OCCURRED\", e)\n        return {}\n</code></pre>"},{"location":"references/references/#akapy.Requester.print_error","title":"<code>print_error(message, response)</code>","text":"<p>Print error message and response (if provided).</p> Source code in <code>akapy/requester.py</code> <pre><code>def print_error(self, message, response):\n    \"\"\"Print error message and response (if provided).\"\"\"\n    print(\"=\" * shutil.get_terminal_size().columns)\n    print(message)\n    if response:\n        pprint(response)\n</code></pre>"},{"location":"references/references/#akapy.Cloudlet.__init__","title":"<code>__init__(auth=None)</code>","text":"<p>Initialize Cloudlet API client.</p> <p>Parameters:</p> Name Type Description Default <code>auth</code> <p>Auth object for handling credentials. Will use default if not provided.</p> <code>None</code> Source code in <code>akapy/cloudlets/cloudlet.py</code> <pre><code>def __init__(self, auth=None) -&gt; None:\n    \"\"\"\n    Initialize Cloudlet API client.\n\n    Args:\n        auth: Auth object for handling credentials. Will use default if not provided.\n    \"\"\"\n    if auth is None:\n        self.auth = Auth()\n    else:\n        self.auth = auth\n\n    self.endpoint = \"cloudlets/api/v2\"\n    self.requester = Requester(self.auth.get_session(), self.auth.host_url)\n</code></pre>"}]}